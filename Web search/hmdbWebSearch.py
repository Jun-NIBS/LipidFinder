"""Summary
This module takes the input dataframe and websearch parameters and searches
the HMDB database: 2 searches are done - one of the online database and the 
2nd of a downloaded version of the online database. This is necessary as not
the lipid classification is contained in the downloaded version of the database.
"""
from __future__ import print_function
from future import standard_library
standard_library.install_aliases()
from builtins import str
from builtins import range
import os
import pandas as pd
import time
import socket
import sys

if sys.version_info[0] >= 3:
    # python 3.x
    from urllib.request import urlretrieve
    from urllib.parse import urlencode
    from urllib.error import HTTPError
    from urllib.error import URLError
else:
    # python 2.x
    from urllib import urlretrieve
    from urllib import urlencode
    from urllib2 import HTTPError
    from urllib2 import URLError


def hmdbSearch(inputFile, hmdbTol):
    """Main function that searches the HMDB database. 
    2 output files are generated: one has the search results, the other
    lists which input data were not found in the database.

    Args:
        inputFile (dataframe): input data file 
        hmdbTol (float): m/z tolerance 

    Returns:
        int: flag is returned indicating whether the HMDB search
        completed successfully (=1) or not (=0)
    """
    print("********************")
    failureTag = 0

    # used for timeout for the urllib.urlretrieve below
    socket.setdefaulttimeout(10)

    numberMasses = len(inputFile)
    mass = inputFile['MZ']
    retentionTime = inputFile['Time']
    polarity = inputFile['Polarity']
    columnType = inputFile['Column-type']

    # set up empty dataframes
    hmdbOutputFile = pd.DataFrame(index=[0])
    hmdbOutputFileTemp = pd.DataFrame(index=[0])
    hmdbNoOutputFile = pd.DataFrame(index=[0])
    hmdbNoResultOutputDF = pd.DataFrame(index=[0])
    resultFile = pd.DataFrame(index=[0])

    try:
        # HMDB URL
        hmdbURL = "http://specdb.wishartlab.com/ms/search.csv"  # csv file download

        for count in range(numberMasses):
            print("Searching HMDB for mass " + str(mass[count]))

            if polarity[count] in ['POS', 'POSC']:
                hmdbPolarity = 'positive'
            elif polarity[count]in ['NEG', 'NEGC']:
                hmdbPolarity = 'negative'

        # To get the automated csv of results from website (doesn't contain everything we want!)
        # query arguments in dictionary format
            hmdbQueryArgs = {'query_masses': mass[count], 'tolerance': hmdbTol, 'mode': hmdbPolarity,
                             'tolerance_units': 'Da', 'database': 'HMDB', 'commit': 'Download Results As CSV'}
            hmdbData = urlencode(hmdbQueryArgs)
            hmdbGetUrl = hmdbURL + "?" + hmdbData
            urlretrieve(
                hmdbGetUrl, "hmdb_temp_csv_file_" + str(mass[count]) + ".csv")
            hmdbCsvFileTemp = pd.read_table(
                "hmdb_temp_csv_file_" + str(mass[count]) + ".csv", sep=',')
            os.remove("hmdb_temp_csv_file_" + str(mass[count]) + ".csv")

            if hmdbCsvFileTemp.empty:        # no database matches
                hmdbNoResultOutputDF['MZ'] = mass[count]
                hmdbNoResultOutputDF['Time'] = retentionTime[count]
                hmdbNoResultOutputDF['Polarity'] = polarity[count]
                hmdbNoResultOutputDF['Column-type'] = columnType[count]
                hmdbNoOutputFile = hmdbNoOutputFile.append(
                    hmdbNoResultOutputDF, ignore_index=True)

            else:
                # add in retention time and polarity columns
                hmdbCsvFileTemp['RETENTION_TIME'] = retentionTime[count]
                hmdbCsvFileTemp['POLARITY'] = polarity[count]
                hmdbCsvFileTemp['COLUMN_TYPE'] = columnType[count]
                hmdbOutputFileTemp = hmdbOutputFileTemp.append(
                    hmdbCsvFileTemp, ignore_index=True)    # This DF has the data I need

                # searchFile is the complete HMDB db containing extra fields I need to add to the results file
                # resultFile generated by merging columns (extra fields) from
                # searchFile to hmdbOutputFileTemp
                searchFile = pd.read_table(
                    "hmdb_parsed_file.csv", sep=',', encoding='ISO-8859-1')
                resultFile = hmdbOutputFileTemp.merge(
                    searchFile, on='compound_id')

    # HTTP error (must be BEFORE URL error), usually server error of some sort
    except HTTPError:
        print ("HMDB connection failure")
        failureTag = 1

    # URL error, usually network connection failure
    except URLError:
        print("HMDB connection failure")
        failureTag = 1

    except IOError:
        print("HMDB connection failure")
        failureTag = 1

# regardless of whether search finished successfully, print out results
# (and 'no results') so far to output files
    # add date and time stap to output file name
    dt = time.strftime("%Y%m%d-%H%M%S")

    # only save the results output as a .csv if there are actual results!
    if not resultFile.empty:
        # gets rid of the 1st row which for some reason is always blank
        # (how='all' means all the values in the row have to be blank)!!
        hmdbOutputFile = resultFile.dropna(axis=0, how='all')

        # rename column headers, calculate DELTA_PPM, drop unwanted columns,
        # add new DATABASE column
        hmdbOutputFile.rename(columns={'adduct': 'ADDUCT_ION', 'compound_id': 'DATABASE_ID', 'formula': 'FORMULA', 'query_mass': 'ORIGINAL_MASS', 'name': 'NAME',
                                       'class': 'CATEGORY', 'adduct_mass': 'RESULT_MASS', 'super_class': 'HMDB_super_class', 'delta': 'HMDB_delta', 'compound_mass': 'HMDB_compound_mass'}, inplace=True)
        hmdbOutputFile['DELTA_PPM'] = (hmdbOutputFile.ORIGINAL_MASS.astype(float).fillna(
            0.0) - hmdbOutputFile.RESULT_MASS.astype(float).fillna(0.0)) * (1000000) / (hmdbOutputFile.ORIGINAL_MASS.astype(float).fillna(0.0))
        hmdbOutputFile = hmdbOutputFile.drop(
            ['adduct_type', 'chemical_formula', 'average_molecular_weight', 'monisotopic_molecular_weight'], 1)
        hmdbOutputFile.insert(0, 'DATABASE', 'HMDB')
        hmdbOutputFile.to_csv("hmdb_results_" + dt + ".csv",
                              sep=',', float_format='%.6f', index=False, encoding="utf8")

    # only save the no results output as a .csv if there is data in the 'no
    # results'
    if not hmdbNoOutputFile.empty:
        hmdbNoOutputFile = hmdbNoOutputFile.dropna(axis=0, how='all')
        hmdbNoOutputFile.to_csv("hmdb_no_results_" + dt + ".csv", sep=',', index=False, columns=[
                                'MZ', 'Time', 'Polarity', 'Column-type'], float_format='%.6f', encoding="utf8")

    print("********************")

    return failureTag
